/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { JobApplication } from "./JobApplication";
import { JobApplicationCountArgs } from "./JobApplicationCountArgs";
import { JobApplicationFindManyArgs } from "./JobApplicationFindManyArgs";
import { JobApplicationFindUniqueArgs } from "./JobApplicationFindUniqueArgs";
import { CreateJobApplicationArgs } from "./CreateJobApplicationArgs";
import { UpdateJobApplicationArgs } from "./UpdateJobApplicationArgs";
import { DeleteJobApplicationArgs } from "./DeleteJobApplicationArgs";
import { InterviewFindManyArgs } from "../../interview/base/InterviewFindManyArgs";
import { Interview } from "../../interview/base/Interview";
import { JobApplicationService } from "../jobApplication.service";
@graphql.Resolver(() => JobApplication)
export class JobApplicationResolverBase {
  constructor(protected readonly service: JobApplicationService) {}

  async _jobApplicationsMeta(
    @graphql.Args() args: JobApplicationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [JobApplication])
  async jobApplications(
    @graphql.Args() args: JobApplicationFindManyArgs
  ): Promise<JobApplication[]> {
    return this.service.jobApplications(args);
  }

  @graphql.Query(() => JobApplication, { nullable: true })
  async jobApplication(
    @graphql.Args() args: JobApplicationFindUniqueArgs
  ): Promise<JobApplication | null> {
    const result = await this.service.jobApplication(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => JobApplication)
  async createJobApplication(
    @graphql.Args() args: CreateJobApplicationArgs
  ): Promise<JobApplication> {
    return await this.service.createJobApplication({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => JobApplication)
  async updateJobApplication(
    @graphql.Args() args: UpdateJobApplicationArgs
  ): Promise<JobApplication | null> {
    try {
      return await this.service.updateJobApplication({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => JobApplication)
  async deleteJobApplication(
    @graphql.Args() args: DeleteJobApplicationArgs
  ): Promise<JobApplication | null> {
    try {
      return await this.service.deleteJobApplication(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Interview], { name: "interviews" })
  async findInterviews(
    @graphql.Parent() parent: JobApplication,
    @graphql.Args() args: InterviewFindManyArgs
  ): Promise<Interview[]> {
    const results = await this.service.findInterviews(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
