/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  JobApplication as PrismaJobApplication,
  Interview as PrismaInterview,
} from "@prisma/client";

export class JobApplicationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.JobApplicationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.jobApplication.count(args);
  }

  async jobApplications(
    args: Prisma.JobApplicationFindManyArgs
  ): Promise<PrismaJobApplication[]> {
    return this.prisma.jobApplication.findMany(args);
  }
  async jobApplication(
    args: Prisma.JobApplicationFindUniqueArgs
  ): Promise<PrismaJobApplication | null> {
    return this.prisma.jobApplication.findUnique(args);
  }
  async createJobApplication(
    args: Prisma.JobApplicationCreateArgs
  ): Promise<PrismaJobApplication> {
    return this.prisma.jobApplication.create(args);
  }
  async updateJobApplication(
    args: Prisma.JobApplicationUpdateArgs
  ): Promise<PrismaJobApplication> {
    return this.prisma.jobApplication.update(args);
  }
  async deleteJobApplication(
    args: Prisma.JobApplicationDeleteArgs
  ): Promise<PrismaJobApplication> {
    return this.prisma.jobApplication.delete(args);
  }

  async findInterviews(
    parentId: string,
    args: Prisma.InterviewFindManyArgs
  ): Promise<PrismaInterview[]> {
    return this.prisma.jobApplication
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .interviews(args);
  }
}
