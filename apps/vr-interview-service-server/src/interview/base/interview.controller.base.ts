/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { InterviewService } from "../interview.service";
import { InterviewCreateInput } from "./InterviewCreateInput";
import { Interview } from "./Interview";
import { InterviewFindManyArgs } from "./InterviewFindManyArgs";
import { InterviewWhereUniqueInput } from "./InterviewWhereUniqueInput";
import { InterviewUpdateInput } from "./InterviewUpdateInput";
import { QuestionFindManyArgs } from "../../question/base/QuestionFindManyArgs";
import { Question } from "../../question/base/Question";
import { QuestionWhereUniqueInput } from "../../question/base/QuestionWhereUniqueInput";

export class InterviewControllerBase {
  constructor(protected readonly service: InterviewService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Interview })
  async createInterview(
    @common.Body() data: InterviewCreateInput
  ): Promise<Interview> {
    return await this.service.createInterview({
      data: {
        ...data,

        resume: data.resume
          ? {
              connect: data.resume,
            }
          : undefined,

        jobApplication: data.jobApplication
          ? {
              connect: data.jobApplication,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        interviewDate: true,

        resume: {
          select: {
            id: true,
          },
        },

        jobApplication: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Interview] })
  @ApiNestedQuery(InterviewFindManyArgs)
  async interviews(@common.Req() request: Request): Promise<Interview[]> {
    const args = plainToClass(InterviewFindManyArgs, request.query);
    return this.service.interviews({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        interviewDate: true,

        resume: {
          select: {
            id: true,
          },
        },

        jobApplication: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Interview })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async interview(
    @common.Param() params: InterviewWhereUniqueInput
  ): Promise<Interview | null> {
    const result = await this.service.interview({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        interviewDate: true,

        resume: {
          select: {
            id: true,
          },
        },

        jobApplication: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Interview })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateInterview(
    @common.Param() params: InterviewWhereUniqueInput,
    @common.Body() data: InterviewUpdateInput
  ): Promise<Interview | null> {
    try {
      return await this.service.updateInterview({
        where: params,
        data: {
          ...data,

          resume: data.resume
            ? {
                connect: data.resume,
              }
            : undefined,

          jobApplication: data.jobApplication
            ? {
                connect: data.jobApplication,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          interviewDate: true,

          resume: {
            select: {
              id: true,
            },
          },

          jobApplication: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Interview })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteInterview(
    @common.Param() params: InterviewWhereUniqueInput
  ): Promise<Interview | null> {
    try {
      return await this.service.deleteInterview({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          interviewDate: true,

          resume: {
            select: {
              id: true,
            },
          },

          jobApplication: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/questions")
  @ApiNestedQuery(QuestionFindManyArgs)
  async findQuestions(
    @common.Req() request: Request,
    @common.Param() params: InterviewWhereUniqueInput
  ): Promise<Question[]> {
    const query = plainToClass(QuestionFindManyArgs, request.query);
    const results = await this.service.findQuestions(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        content: true,

        interview: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/questions")
  async connectQuestions(
    @common.Param() params: InterviewWhereUniqueInput,
    @common.Body() body: QuestionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questions: {
        connect: body,
      },
    };
    await this.service.updateInterview({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/questions")
  async updateQuestions(
    @common.Param() params: InterviewWhereUniqueInput,
    @common.Body() body: QuestionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questions: {
        set: body,
      },
    };
    await this.service.updateInterview({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/questions")
  async disconnectQuestions(
    @common.Param() params: InterviewWhereUniqueInput,
    @common.Body() body: QuestionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      questions: {
        disconnect: body,
      },
    };
    await this.service.updateInterview({
      where: params,
      data,
      select: { id: true },
    });
  }
}
