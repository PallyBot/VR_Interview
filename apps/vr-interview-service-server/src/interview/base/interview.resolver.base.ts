/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Interview } from "./Interview";
import { InterviewCountArgs } from "./InterviewCountArgs";
import { InterviewFindManyArgs } from "./InterviewFindManyArgs";
import { InterviewFindUniqueArgs } from "./InterviewFindUniqueArgs";
import { CreateInterviewArgs } from "./CreateInterviewArgs";
import { UpdateInterviewArgs } from "./UpdateInterviewArgs";
import { DeleteInterviewArgs } from "./DeleteInterviewArgs";
import { QuestionFindManyArgs } from "../../question/base/QuestionFindManyArgs";
import { Question } from "../../question/base/Question";
import { Resume } from "../../resume/base/Resume";
import { JobApplication } from "../../jobApplication/base/JobApplication";
import { InterviewService } from "../interview.service";
@graphql.Resolver(() => Interview)
export class InterviewResolverBase {
  constructor(protected readonly service: InterviewService) {}

  async _interviewsMeta(
    @graphql.Args() args: InterviewCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Interview])
  async interviews(
    @graphql.Args() args: InterviewFindManyArgs
  ): Promise<Interview[]> {
    return this.service.interviews(args);
  }

  @graphql.Query(() => Interview, { nullable: true })
  async interview(
    @graphql.Args() args: InterviewFindUniqueArgs
  ): Promise<Interview | null> {
    const result = await this.service.interview(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Interview)
  async createInterview(
    @graphql.Args() args: CreateInterviewArgs
  ): Promise<Interview> {
    return await this.service.createInterview({
      ...args,
      data: {
        ...args.data,

        resume: args.data.resume
          ? {
              connect: args.data.resume,
            }
          : undefined,

        jobApplication: args.data.jobApplication
          ? {
              connect: args.data.jobApplication,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Interview)
  async updateInterview(
    @graphql.Args() args: UpdateInterviewArgs
  ): Promise<Interview | null> {
    try {
      return await this.service.updateInterview({
        ...args,
        data: {
          ...args.data,

          resume: args.data.resume
            ? {
                connect: args.data.resume,
              }
            : undefined,

          jobApplication: args.data.jobApplication
            ? {
                connect: args.data.jobApplication,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Interview)
  async deleteInterview(
    @graphql.Args() args: DeleteInterviewArgs
  ): Promise<Interview | null> {
    try {
      return await this.service.deleteInterview(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Question], { name: "questions" })
  async findQuestions(
    @graphql.Parent() parent: Interview,
    @graphql.Args() args: QuestionFindManyArgs
  ): Promise<Question[]> {
    const results = await this.service.findQuestions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Resume, {
    nullable: true,
    name: "resume",
  })
  async getResume(@graphql.Parent() parent: Interview): Promise<Resume | null> {
    const result = await this.service.getResume(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => JobApplication, {
    nullable: true,
    name: "jobApplication",
  })
  async getJobApplication(
    @graphql.Parent() parent: Interview
  ): Promise<JobApplication | null> {
    const result = await this.service.getJobApplication(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
